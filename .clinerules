プロジェクトのルールに従って実装すること。
docが存在する場合は、その実装方法を優先して実装すること。


#プロジェクトのディレクトリ構成

```
.
├── .env                               # 環境変数ファイル（※通常.gitignore対象）※読み取り、編集禁止
├── app                                # アプリケーションのルートフォルダ
│   ├── src                            # ソースコード
│   │   ├── main.py                   # FastAPIエントリポイント
│   │   ├── endpoints                 # ルーティングやエンドポイントを定義
│   │   │   └── fortune.py            # /fortune 等のエンドポイント例
│   │   ├── services                  # ビジネスロジックやLLM呼出し処理などをまとめる
│   │   │   ├── create_topics_service.py       # create_topics用サービス
│   │   │   ├── parse_logic_data_service.py    # XMLをパースしてLogicDataを生成するサービス
│   │   │   ├── ghost_tone_service.py          # ghost_tone_model（LLM）呼び出し
│   │   │   ├── summary_service.py             # 内容を20文字以内で要約するサービス
│   │   │   └── fortune_block_service.py       # 分割処理など
│   │   ├── repository               # データ取得リポジトリ
│   │   │   ├── mock_repository.py   # mockdataからデータ取得するリポジトリ
│   │   │   └── external_repository.py  # 外部APIなど本番用のデータ取得リポジトリ(将来的に)
│   │   ├── models                   # DBモデルやORマッパーを使うならここに置く
│   │   ├── utils                    # 共通ユーティリティ
│   │   │   └── llm_client.py        # 実際にClaude API呼び出しなどを行う処理
│   │   ├── data                     # 閲覧履歴がない時のデフォルトのトピックのデータを格納
│   │   │   └── default_topics.py    # 閲覧履歴がない時に使用するデフォルトのトピック
│   │   ├── prompt                   # プロンプトファイルを格納
│   │   │   ├── create_topics_prompts.py       # create_topics用のPrompt
│   │   │   ├── ghost_tone_prompts.py          # ghost_tone用のPrompt
│   │   │   ├── ghost_tone_nohistory_prompts.py  # 閲覧履歴がない時に使うghost_tone用のPrompt
│   │   │   └── summary_prompts.py             # summary用のPrompt
│   │   ├── config                       # 設定関連
│   │   │   └── settings.py             # 設定値を管理する
│   │   ├── schema                       # Pydanticスキーマ
│   │   │   └── schema.py               # FortuneItem, LogicData, FortuneBlockなどの定義、※編集禁止
│   │   └── __init__.py              # Pythonパッケージとして認識させるためのファイル
│   ├── tests                        # テスト関連
│   │   ├── mockdata                 # テスト用のモックデータ
│   │   │   ├── client_input.json    # リクエストボディのモックデータ、※編集禁止
│   │   │   └── logic_data.xml       # テスト用のロジックデータ（XML）、※編集禁止
│   │   ├── test_endpoints           # エンドポイントのユニット/結合テスト
│   │   ├── test_services            # サービス層のユニットテスト
│   │   └── __init__.py             # テスト用パッケージ
│   └── __init__.py                 # Pythonパッケージとして認識させるためのファイル
├── cdk                              # AWS CDKによるIaC
│   ├── app_runner_stack.py         # App Runner関連のスタック定義
│   ├── codepipeline_stack.py       # CodePipeline/CodeBuild関連のスタック定義
│   ├── requirements.txt            # CDKで利用するPythonライブラリの依存関係
│   └── __init__.py                 # CDK用パッケージ
├── doc                              # ドキュメント類
│   └── how_to_use_bedrock_claude.md  # Claude(Bedrock)を使ったLLM実装ガイド、※編集禁止
├── env.example                       # 環境変数のサンプル
├── .gitignore                       # git管理除外ファイル
├── Dockerfile                       # Dockerビルド用
├── requirements.txt                 # アプリケーションのPython依存関係
└── README.md                        # プロジェクト全体の説明


```
#技術スタック
 - python3.11
 - fastAPI
 - docker
 - CI/CD : AWS CodePipeline/App Runner
 - AWS CDK(python)
 - コード管理:github
 - boto3: 1.36.0以上 (Bedrock APIサポートのため)
 - AWSのリージョン : ap-northeast-1 / Bedrockはus-west-2

## 遵守事項
 - ローカル実行時とDocker実行時の環境差分は.envファイルで管理

# 環境構築の大枠の流れ
 - gitのURL、AWSの機密情報等を.envファイルに設定
 - ローカル環境構築
 - APIの動作確認
 - BedrockのAPI呼び出しの動作確認
 - Docker環境構築
 - APIの動作確認

## コーディング規約

### Python
- PEP 8に準拠
- 型ヒントを必須とする
- docstringはGoogle形式で記述
- 関数の行数は50行以内を目標
- PYTHONPATHはapp/srcに設定すること
- テストコードはapp/testsに配置すること
- モジュールのインポート規約：
  - app/src/endpoints/fortune.pyからインポートする場合は以下の形式を使用すること
    例: `from endpoints.fortune import fortune`

### FastAPI
- エンドポイントはOpenAPI仕様に準拠
- レスポンスモデルは必ずPydanticで定義
- エラーハンドリングは統一フォーマットで実装
- ミドルウェアの追加は影響範囲を考慮
- ローカル実行時とDocker実行時ではポートを変えること
- 起動前は必ずuvicornがすでに起動済みか確認し起動していたら停止すること


## セキュリティ
- センシティブなファイルは読み取り、編集不可
- 環境変数は.envファイルに保存
- シークレットは環境変数に保存
- ログにはシークレットを出力しない


## Sensitive Files

DO NOT read or modify:

-   .env files
-   *_/config/secrets._
-   *_/*.pem
-   Any file containing API keys, tokens, or credentials

## Security Practices

-   Never commit sensitive files
-   Use environment variables for secrets
-   Keep credentials out of logs and output

## Testing Standards

-   Unit tests required for business logic
-   Integration tests for API endpoints
-   E2E tests for critical user flows